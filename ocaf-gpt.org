#+title: OCCT OCAF 学习笔记
#+LaTex_COMPILER: xelatex
#+LaTex_HEADER: \usepackage{xeCJK}
#+LaTex_HEADER: \setCJKmainfont{SimSong}
#+LaTex_HEADER: \setCJKmonofont{SimSong}
#+LaTex_HEADER: \let\oldsection\section
#+LaTex_HEADER: \renewcommand{\section}{\clearpage\oldsection}

* Introduction

** OCAF Module

*** Overview
Open CASCADE Technology (OCCT) 是一个开源的软件开发平台，用于三维 CAD、CAM、CAE 系统的开发。它提供了广泛的功能，涵盖了几何建模、图形可视化、数据交换和更多方面。

Open CASCADE Application Framework (OCAF) 是 OCCT 中的一个重要模块。OCAF 是一个应用程序框架，用于简化复杂工程图形应用程序的开发。它提供了一种有效的方式来组织、存储、检索和操作复杂的工程数据。OCAF 特别适合于需要处理复杂的装配结构、历史记录、参数化设计等场景的应用程序。

*** OCAF 的主要功能

+ 数据管理
  - OCAF 提供了一套工具来有效地管理和组织数据。
  - 这包括用于创建、管理和修改数据结构的 API
+ 历史记录和撤销/重做机制
  - OCAF支持记录用户的操作历史，使得可以方便地实现撤销和重做功能。
+ 属性和关系管理
  - OCAF允许开发者为数据元素定义属性（如颜色材料等），并管理数据元素间的关系。
+ 事务管理
  - OCAF支持事务管理，这对于保证数据的一致性和完整性非常重要。
+ 扩展性
  - OCAF设计灵活，易于扩展，开发者可以根据特定应用需求添加新的功能。

通过 OCAF，开发者可以更专注于应用的核心功能，而不是底层的数据管理和操作。

*** OCAF 的主要 Packages

下面列出了一些在 OCAF 中常用且重要的 packages:

+ *TDF (Topological Data Framework)*
  - 用于管理和存储拓扑数据的结构和信息。
  - TDF 提供了一个层次化的数据组织方式，通过 =Label=, =Attribute= 等来存储和管理数据
+ *TDocStd (Document Standard)*
  - =TDocStd= 提供了创建、管理和保存文档的功能
  - 一个文档可以包含一个或多个 TDF 数据结构
+ *XCAF (eXtended CA Framework)*
  - 用于更高级的 CAD 数据处理，如装配结构、颜色和层次信息。
  - XCAF 扩展了 OCAF 的功能，使其能够处理更复杂的 CAD 模型和数据
+ *TNaming (Naming)*
  - 提供了一个命名服务，用于在模型中标识和追踪对象。
  - =TNaming= 使得在模型变更过程中可以保持对特定对象的引用。
+ *TPrsStd (Presentation Standard)*
  - 用于关联数据模型和其图形表示
  - =TPrsStd= 允许开发者定义如何将模型数据转换为可视化的图形表示
+ *TDataStd (Data Standard)*
  - 包含了一系列的 Attribute 类型，如字符串、整数、实数、枚举类型等。
  - TDataStd 提供了基础的数据类型，用于存储和处理常规属性。
+ *AppStdL (Application Standard Library)*
  - 提供了一组标准的应用程序功能和服务，如历史管理、撤销/重做机制等。
+ *BinTObj*
  - 用于持久化存储和加载 OCAF 对象的包。
  - 支持二进制格式，适用于大型数据集。
+ *XmlTObj*
  - 类似于 BinTObj，但用于处理基于 XML 的持久化存储和加载。


** TDF Package

*** Overview

TDF (Topology Data Framework) 是 OCAF 的核心组件，用于管理和组织复杂的工程数据（其中拓扑数据是几何建模的基础）。TDF 提供了一个结构化的方式来存储和操作与拓扑相关的信息，如点、线、面、实体等几何元素及其之间的关系。

*** TDF 的功能与职责

+ 数据组织

  TDF 提供了一种层次化的数据结构，使得对复杂拓扑数据的管理和访问更加直观灵活。

+ 事务管理

  通过 TDF，可以实现对拓扑数据的事务管理，支持撤销/重做操作，保证数据一致性。

+ 属性管理

  TDF 允许为拓扑元素附加属性（颜色材料等），并管理这些属性。

+ 关系管理

  TDF 支持管理拓扑元素之间的关系，如约束、连接等。

+ 版本控制

  TDF 支持数据的版本控制，这对于跟踪数据的历史变更非常有用。

+ 灵活性和扩展性

  TDF 设计灵活，易于扩展，可以根据特定的应用需求进行定制。

*** TDF 的核心类

+ =TDF_Label= class 代表数据结构中的一个节点，可包含多个 sub-Labels 和 Attribute。
+ =TDF_Attribute= class 附加在 Label 上的数据单元，用于存储特定类型的信息，如几何数据、颜色、文本等。
+ =TDF_Data= class 代表整个数据集合，包含一个或多个 =TDF_Label= 树
+ =TDF_TagSource= class 用于自动生成唯一的 Tag (标签号)。
+ =TDF_RelocationTable= class 在数据复制和粘贴操作中使用，管理 Label 和 Attribute 之间的关系映射。


** TDocStd Package

*** Overview
=TDocStd= 主要用于处理和管理文档(Document)，这些文档用于存储和组织复杂的 CAD 数据结构。一个文档通常代表一个工程项目或一个 CAD 模型，它包含了所有相关的数据和信息。 =TDocStd= 提供了一套工具和接口来创建、管理和存储这些文档。

*** TDocStd 的功能与职责

+ 文档管理

  =TDocStd= 提供了创建和管理文档的基本机制。文档可以包含多种类型的数据，如几何形状、装配信息、属性等。

+ 文档结构

  文档中的数据通过 OCAF 的 =TDF_Label= 结构进行组织。每个文档都有一个 root Label, 从 root Label 开始可以创建一个层次化的数据结构。

+ 事务管理

  =TDocStd= 支持事务管理，允许用户对文档进行修改操作，同时支持 Undo/Redo 功能。这对于保持数据的一致性和完整性至关重要。

+ 存储和加载

  =TDocStd= 提供了将文档保存到文件系统和从文件系统加载文档的功能。支持多种格式，包括自定义格式。

+ 版本控制

  文档可以支持版本控制，允许跟踪文档的历史变更。

+ 扩展性

  =TDocStd= 的设计允许开发者根据需要扩展和定制文档的功能，以适应特定的应用需求。

*** TDocStd 与 TDF package 的关系

+ =TDocStd= 依赖于 =TDF= 来组织文档内的数据。

  每个 =TDocStd_Document= 包含一个根 =TDF_Label=, 这个 root label 是文档所有数据的起点。通过 root label, 可以访问和操作文档中的所有数据。

+ 在 TDF 基础上，TDocStd 提供了文档级别的管理，如创建/保存/加载文档、事务处理(Undo/Redo)等。

*** TDocStd 的核心类

+ =TDocStd_Document= class 代表一个文档，是管理和组织 CAD 数据的主要实体。
+ =TDocStd_Application= class 处理文档的创建、加载和保存，管理文档集合。
+ =TDocStd_Owner= class 作为文档所有者的角色，管理文档的状态和事务。


** XCAF Package (属于 DataExchange Module)

*** Overview

XCAF (eXtended CA Framework) 用于处理更高级别的 CAD 数据，尤其是那些涉及到复杂装配结构的数据。XCAF 提供了一些列工具和接口，用于管理和操作包括颜色、材料、元数据、层级关系等在内的复杂 CAD 模型数据。

*** XCAF 主要功能与职责

+ 复杂装配结构管理

  XCAF 提供了工具来创建和管理复杂的 CAD 装配结构，包括定义装配体、子装配体和零件之间的层级关系。

+ 颜色和图层管理

  支持为模型的不同部分指定颜色和图层，帮助改善模型的可视化和组织。

+ 高级属性管理

  XCAF 允许为模型元素添加和管理高级属性，如材料属性、PMI(产品和制造信息)、注释和元数据。

+ 形状标识和追踪

  提供工具来唯一标识和追踪模型中的形状，尤其在模型的变更或更新过程中，保持对特定形状的引用。

+ 数据交换支持

  支持与其他 CAD 系统间的数据交换，特别是在处理 STEP 和 IGES 文件格式时，能够导入和导出中配信息和属性。

+ 扩展性和定制

  XCAF 设计灵活，可以根据特定应用需求进行扩展和定制。

*** XCAF 的核心类

+ =XCAFDoc_ShapeTool= class 用于管理装配结构和形状。
+ =XCAFDoc_ColorTool= class 管理颜色属性
+ =XCAFDoc_LayerTool= class 管理图层属性
+ =XCAFDoc_MaterialTool= class 管理材料属性
+ =XCAFDoc_DatumTool=, =XCAFDoc_DimTolTool= classes 管理标注和公差。
+ =XCAFDoc_AreaStyleTool= class 管理区域样式


** TNaming package

*** Overview

=TNaming= 提供了命名服务，以便在复杂的 CAD 模型和数据结构中标识和追踪对象。这对于在模型变更过程中保持对特定对象的引用非常重要。

*** TNaming 的主要功能与职责

+ 对象标识和追踪

  =TNaming= 允许用户为模型中的对象(如形状、特征等)赋予唯一的名称，从而在整个模型的生命周期中追踪和引用这些对象。

+ 历史追踪

  支持记录和跟踪对象随时间的变化。这使得即使在模型被修改或更新后，也能够识别和访问原始对象。

+ 版本控制

  =TNaming= 提供了一种机制来处理模型中对象的版本控制，保证在多次修改和迭代中对象的一致性。

+ 复杂操作支持

  对于复杂的操作（如布尔运算、分割、修剪等）, =TNaming= 能够帮助保持对影响的对象的引用，确保数据的准确性和完整性。

+ 与 TDF 协同工作

  =TNaming= 与 =TDF= 紧密协作，利用 =TDF_Label= 和 =TDF_Attribute= 来存储和管理命名信息。

+ 撤销/重做机制支持

  支持与 OCAF 的撤销/重做机制结合使用，确保在运行这些操作时保持命名信息的一致性。

*** TNaming 的核心类

+ =TNaming_NamedShape= class 用于关联形状(Shape)与名称，实现形状的命名和追踪。
+ =TNaming_Builder= class 用于构建和修改命名关系
+ =TNaming_Tool= class 提供一系列静态方法来操作和查询命名信息
+ =TNaming_Naming= class 存储和管理命名操作的历史记录。
+ =TNaming_NamingTool= class 提供用于执行复杂命名操作的高级方法


** TPrsStd package

*** Overview

=TPrsStd= package 用于将工程数据（如存储在 OCAF 文档中的数据）与其图形表示相关联。它为开发者提供了一系列工具和接口，以便在图形界面中展示和交互复杂的工程模型。

*** TPrsStd 主要功能与职责

+ 图形表示管理

  =TPrsStd= 使得开发者可以将工程数据（如形状、属性等）与其在图形用户界面中的视觉表示相关联。这包括形状的渲染、颜色、纹理等。

+ 交互和选择支持

  提供了工具来支持用户与图形表示的交互，包括选择、高亮显示和编辑操作。

+ 属性与视觉同步

  确保工程数据的更改能够实时反映在图形表示上，例如当形状发生变化时，其视觉表示也会相应更新。

+ 高级显示功能

  支持高级的显示功能，如透明度、阴影和纹理映射，使得工程模型的视觉表示更加逼真和详细。

+ 自定义显示属性

  允许开发者定义自己的显示属性和表示方式，以满足特定应用的需求。

+ 与 OCAF 结合使用

  =TPrsStd= 与 OCAF的其他组件（如 =TDF_Label=, =TDF_Attribute=)紧密集成，使得开发者可以方便地管理和同步数据与其图形表示。

+ 支持多种渲染引擎

  可以与 OCCT 提供的不同渲染引擎（如OpenGL）协同工作，提供高质量的图形输出。

*** TPrsStd 的核心类

+ =TPrsStd_AISPresentation= class 用于管理工程数据的图形表示，如形状在图形界面中的显示。
+ =TPrsStd_AISViewer= class 提供一个视图环境，用于显示和管理多个图形表示。
+ =TPrsStd_Presentation= class 作为数据和其图形表示之间的桥梁。
+ =TPrsStd_Driver= class 为具体的数据类型提供图形表示的生成和更新逻辑。


** TDataStd package

*** Overview

=TDataStd= 主要提供了一系列标准的数据属性(Attributes)，这些属性可以附加到 OCAF 文档中的 Labels 上，用于存储和管理各种类型的数据。

*** TDataStd 主要功能与职责

+ 基本数据类型的管理

  =TDataStd= 提供了用于存储基本数据类型（如字符串、整数、实数、布尔值等）的属性。这些属性用于存储和检索与标签相关联的基本信息。

+ 集合和列表的管理

  提供了管理数据集合（如数组、列表）的属性，用于存储多个数据项。

+ 命名和标识符管理

  支持为标签分配名称和标识符，方便数据的识别与引用。

+ 枚举和状态管理

  提供了用于管理枚举值和状态的属性，可以用于表示有限的选择集或状态机。

+ 文档的元数据管理

  支持存储文档级别的元数据，如作者、版本信息、注释等。

+ 与 =TDF_Label= 结合使用

  =TDataStd= 的属性与 =TDF_Label= 紧密集成，使得数据可以方便地附加到标签上，并在 OCAF 文档的层次化结构中进行管理。

*** TDataStd 的核心类

+ =TDataStd_Integer= 用于存储和管理整数值
+ =TDataStd_Real= 用于存储和管理实数值
+ =TDataStd_String= 用于存储和管理字符串
+ =TDataStd_UAttribute= 作为用户自定义数据的基类，可以派生出用于存储特定类型数据的类。
+ =TDataStd_Name= 用于存储和管理对象的名称
+ =TDataStd_Boolean= 用于存储和管理布尔值
+ =TDataStd_Enum= 用于存储和管理枚举值


** BinTObj package

** XmlTObj packages


* 开发环境搭建

** Ubuntu 环境下编译与配置 OCCT 开发环境

1. 安装依赖

  首先安装所有必要的依赖包，通常包括编译器、构建工具和其他库等。

  #+begin_src bash
  sudo apt-get update
  sudo apt-get install build-essential cmake\
      git libfreetype6-dev libfontconfig1-dev\
      libx11-dev libxext-dev libxt-dev libxmu-dev\
      libgl1-mesa-dev tcl-dev tk-dev
  #+end_src

2. 获取 OCCT 源代码

  你可以从 [[https://dev.opencascade.org/release][OpenCASCADE]] 官网或 [[https://github.com/Open-Cascade-SAS/OCCT][GitHub]] 上的仓库获取源代码。

  #+begin_src bash
  mkdir ~/geom
  cd ~/geom
  git clone https://github.com/Open-Cascade-SAS/OCCT.git
  #+end_src

3. 编译与安装 OCCT

  + 使用 CMake 来配置构建系统，创建一个构建目录，在其中运行 cmake

    #+begin_src bash
    mkdir occt-build
    mkdir occt-install
    cd occt-build
    cmake ../OCCT -DCMAKE_INSTALL_PREFIX=./occt-install
    #+end_src

  + 编译 OCCT 库: =make -j$(nproc)=
  + 安装 OCCT 库: =sudo make install=

4. 配置环境变量

  设置环境变量以使编译器和连接器能够找到 OCCT 的头文件和共享库。在 =~/.bashrc= 或 =~/.profile= 中添加如下内容

  #+begin_src shell
  export CASROOT=~/geom/occt-install
  export LD_LIBRARY_PATH=$CASROOT/lib:$LD_LIBRARY_PATH
  #+end_src


** 编写简单的 OCCT 程序

OCCT 安装完成后，我们可以通过编译运行一个简单的 OCCT 示例程序来验证安装。

新建项目目录 =~/hello-occt/=, 新建项目文件 =CMakeLists.txt= 和 =main.cpp=. =CMakeLists.txt= 的内容如下：

#+begin_src cmake
cmake_minimum_required(VERSION 3.10)
project(hello-occt)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(OpenCASCADE REQUIRED)

include_directories(${OpenCASCADE_INCLUDE_DIR})

set(SOURCES main.cpp)
add_executable(${CMAKE_PROJECT_NAME} ${SOURCES})

target_link_libraries(${CMAKE_PROJECT_NAME} ${OpenCASCADE_LIBRARIES})
#+end_src

+ =project(hello-occt)= 设置项目的名称
+ =set(CMAKE_CXX_STANDARD 17)= 指定 C++ 标准
+ =find_package(OpenCASCADE REQUIRED)= 查找并加载 OCCT 库
+ =include_directories(${OpenCASCADE_INCLUDE_DIR})= 添加 OCCT 头文件的路径
+ =set(SOURCES ...)= 定义了项目的源文件
+ =add_executable(${CMAKE_PROJECT_NAME} ${SOURCES})= 创建一个可执行文件
+ =target_link_libraries(${CMAKE_PROJECT_NAME} ${OpenCASCADE_LIBRARIES})= 链接 OCCT 库

下面的验证程序，创建一个简单的长方体，然后获取其 Topo Shape。源代码文件 =main.cpp= 如下

#+begin_src cpp
#include <iostream>
#include <BRepPrimAPI_MakeBox.hxx>
#include <TopoDS_Shape.hxx>

int main() {
  BRepPrimAPI_MakeBox box(1., 2., 3.);
  const TopoDS_Shape& shape = box.Shape();
  std::cout << "Hello OCCT" << std::endl;
  return 0;
}
#+end_src

按照如下的方式编译并执行程序

#+begin_src bash
mkdir build
cd build
cmake ..
cmake --build .
./hello-occt
#+end_src

程序执行成功的话，会打印 =Hello OCCT= 。
下面穿插介绍一下涉及的 OCCT clases。

** 相关的 OCCT 类

*** =BRepPrimAPI_MakeBox= class

=BRepPrimAPI_MakeBox= 这个类是 OCCT 中 BRep 建模的一部分，用于创建三维的长方体(盒子)。长方体可以通过指定宽度、高度和深度来定义，也可以通过其他方式如两个对角点或中心点和尺寸来定义。它的一些关键接口有：

+ =BRepPrimAPI_MakeBox(gp_Pnt& P, Standard_Real dx, Standard_Real dy, Standard_Real dz)=: 以点 =P= 作为长方体的一个角，并指定长方体在三个方向上的尺寸 =(dx, dy, dz)= 来创建长方体。
+ =BRepPrimAPI_MakeBox(Standard_Real dx, Standard_Real dy, Standard_Real dz)=: 创建一个以原点为一个角的长方体，尺寸为 =(dx, dy, dz)=
+ =BRepPrimAPI_MakeBox(gp_Pnt& P1, gp_Pnt& P2)=: 以两个对角点 =P1= 和 =P2= 来创建长方体。
+ =BRepPrimAPI_MakeBox(gp_Ax2& Axes, Standard_Real dx, Standard_Real dy, Standard_Real dz)=: 以 =Axes= 定义的坐标系为参考，创建尺寸为 =(dx, dy, dz)= 的长方体
+ =Shape()= 方法可以获取生成的长方体形状 (=TopoDS_Shape= 类型)。

*** =TopoDS_Shape= class

=TopoDS_Shape= 是 OCCT 的一个核心类，用于表示和操作几何形状。 =TopoDS_Shape= 是所有几何形状的基类，包括点、线、面、实体等，它为各种几何实体提供了一种通用的访问和操作方式。它的一些重要的接口有:

+ =IsNull()=: 检查形状是否为空（引用为空）。
+ =IsEmpty()=: 检查形状是否为空或没有几何信息。
+ =TShape()=: 返回 Shape 的一个 handle。
+ =Orientation()=, =Orientation(TopAbs_Orientation)=: 获取和设置 Shape 的方向
+ =Location()=, =Location(const TopLoc_Location&)=: 获取和设置 Shape 的局部坐标系(local coordinate system)
+ =Located(const TopLoc_Location&)=: 获取一个当前 Shape 在新位置处的副本。
+ =Move(const TopLoc_Location&)=: 移动 Shape 的位置。
+ =Moved(const TopLoc_Location&)=: 获取一个当前 Shape 移动后的副本
+ =Reverse()=: 反转形状的方向 (orientation)
+ =Reversed()=: 获取一个当前 Shape 反转方向后的副本
+ =ShapeType()=: 获取 Shape 的类型，如 =TopAbs_VERTEX=, =TopAbs_EDGE=, =TopAbs_FACE= 等。

* 一个基本的 OCAF 程序

** 程序源码

下面的程序代码，创建了一个 App，在 App 内新建一个 Doc 文档，然后在 Main Label 下插入一个 Integer Attribute，最后保存到磁盘文件，并关闭内存中的文件。

#+begin_src cpp
#include <TDocStd_Application.hxx>
#include <TDataStd_Integer.hxx>
#include <BinDrivers.hxx>

int main() {
  Handle(TDocStd_Application) app = new TDocStd_Application;
  BinDrivers::DefineFormat(app);

  Handle(TDocStd_Document) doc;
  app->NewDocument("BinOcaf", doc);

  if (doc.IsNull()) {
    std::cout << "Error: cannot create an OCAF document" << std::endl;
    return 1;
  }

  TDF_Label mainLab = doc->Main();
  TDataStd_Integer::Set(mainLab, 42);

  auto sstatus = app->SaveAs(doc, "./test.cbf");
  if (sstatus != PCDM_SS_OK) {
    app->Close(doc);
    std::cout << "Cannot write OCAF document" << std::endl;
    return 1;
  }

  app->Close(doc);
  return 0;
}
#+end_src

上面的程序编译并执行后，会在当前目录下创建一个名为 =test.cbf= 的 OCC 二进制文档。我们可以大致查看一下二进制内容，如下图

[[./img/binocaf-binary-content.png]]

我们可以大致看到文档中包含了 creation-date file-format, reference-counter, modification-counter, =TDataStd_Integer= 等一些信息。

** 相关的 OCCT 类

*** =TDocStd_Application= class

类 =TDocStd_Application= 用于创建、打开、保存、关闭和管理 OCAF 文档(=TDocStd_Document=)，支持多文档界面(MDI)，允许同时处理多个文档。它是开发基于 OCAF 的应用程序的关键组件。

+ =NewDocument(format: String, TDocStd_Document&)= 创建一个新的文档
+ =Open(path: String, TDocStd_Document&)= 打开磁盘上的一个文档
+ =Save(TDocStd_Document&)= 保存文档
+ =SaveAs(TDocStd_Document&, path: String)= 文档另存为
+ =Close(TDocStd_Document&)= 关闭文档

*** =TDocStd_Document= class

类 =TDocStd_Document= 代表一个 OCAF 文档，用于存储和管理复杂的工程数据。它包含一个或多个层次化的数据结构（通过 =TDF_Label= 组织）。OCAF 文档支持事务处理机制，提供了 Undo/Redo 接口；支持文档的保存和加载。

+ =IsSaved()= 检查文档是否已保存
+ =IsEmpty()= 检查文档是否为空，即 main label 是否包含 attributes
+ =NewCommand()= 启动一个新的事务或命令
+ =CommitCommand()= 提交当前事务，使其更改称为文档的一部分
+ =Undo()=, =Redo()= 撤销或重做最近的事务
+ =GetUndoLimit()=, =SetUndoLimit(int)= 获取和设置撤销操作的限制
+ =IsChanged()= 检查文档子上次保存后是否被修改
+ =SetModified(TDF_Label&)= 标记一个 label 为 modified，文档变为 UnValid 状态
+ =Recompute()= 重新计算，传播 modification 的影响
+ =IsValid()= 检查文档修改后，是否重新计算了
+ =Main()= 获取文档的 main label
+ =DumpJson(OStream&)= 打印文档内容，用于调试

*** =TDF_Label= class

类 =TDF_Label=

*** =TDataStd_Integer= class

*** =BinDrivers= class

* OCAF 实现参数化设计

下面的代码基于 OCAF 实现了一个参数化设计程序。

* 基于 IVtk Package 实现一个 VTK 模型查看器
